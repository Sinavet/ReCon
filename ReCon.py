import streamlit as st
import os
import zipfile
import tempfile
from pathlib import Path
from PIL import Image
import pillow_heif
import shutil

pillow_heif.register_heif_opener()

SUPPORTED_EXTS = ('.jpg', '.jpeg', '.png', '.bmp', '.webp', '.tiff', '.heic', '.heif')

st.set_page_config(page_title="–§–æ—Ç–æ-–±–æ—Ç: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", page_icon="üñºÔ∏è")
st.title("üñºÔ∏è –§–æ—Ç–æ-–±–æ—Ç: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")

mode = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
    ["–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ", "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG"]
)

st.markdown(
    """
    <small>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ zip-–∞—Ä—Ö–∏–≤ —Å –ø–∞–ø–∫–∞–º–∏ –∏ —Ñ–æ—Ç–æ.<br>
    <b>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> –í –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ <code>1.jpg</code>.<br>
    <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:</b> –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ <b>JPG</b> —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º.<br>
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, BMP, WEBP, TIFF, HEIC/HEIF.</small>
    """, unsafe_allow_html=True
)

uploaded_files = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ zip-–∞—Ä—Ö–∏–≤ (–¥–æ 200 –ú–ë)",
    type=["jpg", "jpeg", "png", "bmp", "webp", "tiff", "heic", "heif", "zip"],
    accept_multiple_files=True
)

if "log" not in st.session_state:
    st.session_state.log = []
if "result_zip" not in st.session_state:
    st.session_state.result_zip = None
if "stats" not in st.session_state:
    st.session_state.stats = {}

def reset_state():
    st.session_state.log = []
    st.session_state.result_zip = None
    st.session_state.stats = {}

if st.button("–°–±—Ä–æ—Å–∏—Ç—å", type="primary"):
    reset_state()

def extract_images_from_zip(zip_file, temp_dir):
    extracted = []
    with zipfile.ZipFile(zip_file, "r") as zip_ref:
        zip_ref.extractall(temp_dir)
    for file in Path(temp_dir).rglob("*"):
        if file.is_file() and file.suffix.lower() in SUPPORTED_EXTS:
            extracted.append(file)
    return extracted

def convert_to_jpg(src_path, dst_path):
    try:
        img = Image.open(src_path)
        icc_profile = img.info.get('icc_profile')
        img = img.convert("RGB")
        img.save(dst_path, "JPEG", quality=100, optimize=True, progressive=True, icc_profile=icc_profile)
        return True, ""
    except Exception as e:
        return False, str(e)

def make_zip_with_structure(files, root_dir, zip_path):
    with zipfile.ZipFile(zip_path, "w") as zipf:
        for src, rel in files:
            zipf.write(src, arcname=rel)

def make_zip_with_folders(root_dir, zip_path):
    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫, –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ
    shutil.make_archive(base_name=str(zip_path)[:-4], format='zip', root_dir=str(root_dir))

def clear_temp_dir(temp_dir):
    for root, dirs, files in os.walk(temp_dir, topdown=False):
        for name in files:
            try:
                os.remove(os.path.join(root, name))
            except Exception:
                pass
        for name in dirs:
            try:
                os.rmdir(os.path.join(root, name))
            except Exception:
                pass

if uploaded_files:
    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
        with tempfile.TemporaryDirectory() as temp_dir:
            all_images = []
            log = []
            # --- –°–±–æ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ ---
            for uploaded in uploaded_files:
                if uploaded.name.lower().endswith(".zip"):
                    zip_temp = os.path.join(temp_dir, uploaded.name)
                    with open(zip_temp, "wb") as f:
                        f.write(uploaded.read())
                    extracted = extract_images_from_zip(zip_temp, temp_dir)
                    log.append(f"üì¶ –ê—Ä—Ö–∏–≤ {uploaded.name}: –Ω–∞–π–¥–µ–Ω–æ {len(extracted)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
                    all_images.extend(extracted)
                elif uploaded.name.lower().endswith(SUPPORTED_EXTS):
                    img_temp = os.path.join(temp_dir, uploaded.name)
                    with open(img_temp, "wb") as f:
                        f.write(uploaded.read())
                    all_images.append(Path(img_temp))
                    log.append(f"üñºÔ∏è –§–∞–π–ª {uploaded.name}: –¥–æ–±–∞–≤–ª–µ–Ω.")
                else:
                    log.append(f"‚ùå {uploaded.name}: –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

            if not all_images:
                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            else:
                if mode == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ":
                    # --- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ ---
                    exts = SUPPORTED_EXTS
                    renamed = 0
                    skipped = 0
                    folders = sorted({img.parent for img in all_images})
                    for folder in folders:
                        photos = [f for f in folder.iterdir() if f.is_file() and f.suffix.lower() in exts]
                        relative_folder_path = folder.relative_to(temp_dir)
                        if len(photos) == 1:
                            photo = photos[0]
                            new_name = f"1{photo.suffix.lower()}"
                            new_path = photo.parent / new_name
                            relative_photo_path = photo.relative_to(temp_dir)
                            relative_new_path = new_path.relative_to(temp_dir)
                            if new_path.exists():
                                log.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: –§–∞–π–ª '{relative_new_path}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                                skipped += 1
                            else:
                                photo.rename(new_path)
                                log.append(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: '{relative_photo_path}' -> '{relative_new_path}'")
                                renamed += 1
                        elif len(photos) > 1:
                            log.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: –í –ø–∞–ø–∫–µ '{relative_folder_path}' –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.")
                            skipped += len(photos)
                        else:
                            log.append(f"–ò–Ω—Ñ–æ: –í –ø–∞–ø–∫–µ '{relative_folder_path}' –Ω–µ—Ç —Ñ–æ—Ç–æ.")
                            skipped += 1
                    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏
                    extracted_items = [p for p in Path(temp_dir).iterdir() if p.name != uploaded_files[0].name]
                    zip_root = Path(temp_dir)
                    if len(extracted_items) == 1 and extracted_items[0].is_dir():
                        zip_root = extracted_items[0]
                    result_zip = os.path.join(temp_dir, "result_rename.zip")
                    make_zip_with_folders(zip_root, result_zip)
                    with open(result_zip, "rb") as f:
                        st.session_state.result_zip = f.read()
                    st.session_state.stats = {
                        "total": len(all_images),
                        "renamed": renamed,
                        "skipped": skipped
                    }
                    st.session_state.log = log
                else:
                    # --- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ---
                    converted_files = []
                    errors = 0
                    for i, img_path in enumerate(all_images, 1):
                        rel_path = img_path.relative_to(temp_dir)
                        out_path = os.path.join(temp_dir, str(rel_path.with_suffix('.jpg')))
                        out_dir = os.path.dirname(out_path)
                        os.makedirs(out_dir, exist_ok=True)
                        ok, err = convert_to_jpg(img_path, out_path)
                        if ok:
                            converted_files.append((out_path, rel_path.with_suffix('.jpg')))
                            log.append(f"‚úÖ {rel_path} ‚Üí {rel_path.with_suffix('.jpg')}")
                        else:
                            log.append(f"‚ùå {rel_path}: –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ({err})")
                            errors += 1
                    if converted_files:
                        result_zip = os.path.join(temp_dir, "result_convert.zip")
                        make_zip_with_structure(converted_files, temp_dir, result_zip)
                        with open(result_zip, "rb") as f:
                            st.session_state.result_zip = f.read()
                        st.session_state.stats = {
                            "total": len(all_images),
                            "converted": len(converted_files),
                            "errors": errors
                        }
                        st.session_state.log = log
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                        st.session_state.log = log

if st.session_state.result_zip:
    stats = st.session_state.stats
    if mode == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ":
        st.success(f"–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {stats.get('renamed', 0)} –∏–∑ {stats.get('total', 0)} –ø–∞–ø–æ–∫. –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.get('skipped', 0)}")
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ",
            data=st.session_state.result_zip,
            file_name="renamed_photos.zip",
            mime="application/zip"
        )
    else:
        st.success(f"–ì–æ—Ç–æ–≤–æ! –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('converted', 0)} –∏–∑ {stats.get('total', 0)} —Ñ–∞–π–ª–æ–≤. –û—à–∏–±–æ–∫: {stats.get('errors', 0)}")
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å JPG",
            data=st.session_state.result_zip,
            file_name="converted_images.zip",
            mime="application/zip"
        )
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
        st.text_area("–õ–æ–≥:", value="\n".join(st.session_state.log), height=300, disabled=True)