import streamlit as st
import os
import zipfile
import tempfile
from pathlib import Path
from PIL import Image
import pillow_heif
import shutil

pillow_heif.register_heif_opener()

SUPPORTED_EXTS = ('.jpg', '.jpeg', '.png', '.bmp', '.webp', '.tiff', '.heic', '.heif')

st.set_page_config(page_title="–§–æ—Ç–æ-–±–æ—Ç: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", page_icon="üñºÔ∏è")

if "step" not in st.session_state:
    st.session_state["step"] = 1
if "uploaded_files" not in st.session_state:
    st.session_state["uploaded_files"] = None
if "mode" not in st.session_state:
    st.session_state["mode"] = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ"
if "log" not in st.session_state:
    st.session_state["log"] = []
if "result_zip" not in st.session_state:
    st.session_state["result_zip"] = None
if "stats" not in st.session_state:
    st.session_state["stats"] = {}

def reset_all():
    st.session_state["step"] = 1
    st.session_state["uploaded_files"] = None
    st.session_state["mode"] = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ"
    st.session_state["log"] = []
    st.session_state["result_zip"] = None
    st.session_state["stats"] = {}

st.title("üñºÔ∏è –§–æ—Ç–æ-–±–æ—Ç: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")

with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"):
    st.markdown("""
    **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∞—Ä—Ö–∏–≤.
    2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º.
    3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    **FAQ:**
    - *–ü–æ—á–µ–º—É –Ω–µ –≤—Å–µ —Ñ–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å?*  
      –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.
    - *–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∞—Ä—Ö–∏–≤ –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è?*  
      –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π.
    """)

# --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
if st.session_state["step"] == 1:
    st.header("–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ zip-–∞—Ä—Ö–∏–≤ (–¥–æ 200 –ú–ë)",
        type=["jpg", "jpeg", "png", "bmp", "webp", "tiff", "heic", "heif", "zip"],
        accept_multiple_files=True,
        key="file_uploader_step1"
    )
    if uploaded_files:
        st.session_state["uploaded_files"] = uploaded_files
        if st.button("–î–∞–ª–µ–µ", type="primary"):
            st.session_state["step"] = 2
    st.button("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", on_click=reset_all)

# --- –®–∞–≥ 2: –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ ---
elif st.session_state["step"] == 2:
    st.header("–®–∞–≥ 2: –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞")
    mode = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        ["–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ", "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG"],
        index=0 if st.session_state["mode"] == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ" else 1,
        key="mode_radio"
    )
    st.session_state["mode"] = mode
    col1, col2 = st.columns(2)
    with col1:
        st.button("–ù–∞–∑–∞–¥", on_click=lambda: st.session_state.update({"step": 1}))
    with col2:
        st.button("–î–∞–ª–µ–µ", on_click=lambda: st.session_state.update({"step": 3}), type="primary")
    st.button("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", on_click=reset_all)

# --- –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ ---
elif st.session_state["step"] == 3:
    st.header("–®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")
    uploaded_files = st.session_state["uploaded_files"]
    mode = st.session_state["mode"]
    st.info(f"–†–µ–∂–∏–º: {mode}")
    progress_bar = st.progress(0, text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...")
    with tempfile.TemporaryDirectory() as temp_dir:
        all_images = []
        log = []
        # --- –°–±–æ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ ---
        for uploaded in uploaded_files:
            if uploaded.name.lower().endswith(".zip"):
                zip_temp = os.path.join(temp_dir, uploaded.name)
                with open(zip_temp, "wb") as f:
                    f.write(uploaded.read())
                with zipfile.ZipFile(zip_temp, "r") as zip_ref:
                    zip_ref.extractall(temp_dir)
                extracted = [file for file in Path(temp_dir).rglob("*") if file.is_file() and file.suffix.lower() in SUPPORTED_EXTS]
                log.append(f"üì¶ –ê—Ä—Ö–∏–≤ {uploaded.name}: –Ω–∞–π–¥–µ–Ω–æ {len(extracted)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
                all_images.extend(extracted)
            elif uploaded.name.lower().endswith(SUPPORTED_EXTS):
                img_temp = os.path.join(temp_dir, uploaded.name)
                with open(img_temp, "wb") as f:
                    f.write(uploaded.read())
                all_images.append(Path(img_temp))
                log.append(f"üñºÔ∏è –§–∞–π–ª {uploaded.name}: –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                log.append(f"‚ùå {uploaded.name}: –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        if not all_images:
            st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            st.button("–ù–∞–∑–∞–¥", on_click=lambda: st.session_state.update({"step": 1}))
            st.button("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", on_click=reset_all)
        else:
            if mode == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ":
                exts = SUPPORTED_EXTS
                renamed = 0
                skipped = 0
                folders = sorted({img.parent for img in all_images})
                for i, folder in enumerate(folders):
                    photos = [f for f in folder.iterdir() if f.is_file() and f.suffix.lower() in exts]
                    relative_folder_path = folder.relative_to(temp_dir)
                    if len(photos) == 1:
                        photo = photos[0]
                        new_name = f"1{photo.suffix.lower()}"
                        new_path = photo.parent / new_name
                        relative_photo_path = photo.relative_to(temp_dir)
                        relative_new_path = new_path.relative_to(temp_dir)
                        if new_path.exists():
                            log.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: –§–∞–π–ª '{relative_new_path}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                            skipped += 1
                        else:
                            photo.rename(new_path)
                            log.append(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: '{relative_photo_path}' -> '{relative_new_path}'")
                            renamed += 1
                    elif len(photos) > 1:
                        log.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: –í –ø–∞–ø–∫–µ '{relative_folder_path}' –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.")
                        skipped += len(photos)
                    else:
                        log.append(f"–ò–Ω—Ñ–æ: –í –ø–∞–ø–∫–µ '{relative_folder_path}' –Ω–µ—Ç —Ñ–æ—Ç–æ.")
                        skipped += 1
                    progress_bar.progress((i + 1) / len(folders), text=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–ø–æ–∫: {i + 1}/{len(folders)}")
                extracted_items = [p for p in Path(temp_dir).iterdir() if p.name != uploaded_files[0].name]
                zip_root = Path(temp_dir)
                if len(extracted_items) == 1 and extracted_items[0].is_dir():
                    zip_root = extracted_items[0]
                result_zip = os.path.join(temp_dir, "result_rename.zip")
                shutil.make_archive(base_name=result_zip[:-4], format='zip', root_dir=str(zip_root))
                with open(result_zip, "rb") as f:
                    st.session_state["result_zip"] = f.read()
                st.session_state["stats"] = {
                    "total": len(all_images),
                    "renamed": renamed,
                    "skipped": skipped
                }
                st.session_state["log"] = log
            else:
                converted_files = []
                errors = 0
                for i, img_path in enumerate(all_images, 1):
                    rel_path = img_path.relative_to(temp_dir)
                    out_path = os.path.join(temp_dir, str(rel_path.with_suffix('.jpg')))
                    out_dir = os.path.dirname(out_path)
                    os.makedirs(out_dir, exist_ok=True)
                    try:
                        img = Image.open(img_path)
                        icc_profile = img.info.get('icc_profile')
                        img = img.convert("RGB")
                        img.save(out_path, "JPEG", quality=100, optimize=True, progressive=True, icc_profile=icc_profile)
                        converted_files.append((out_path, rel_path.with_suffix('.jpg')))
                        log.append(f"‚úÖ {rel_path} ‚Üí {rel_path.with_suffix('.jpg')}")
                    except Exception as e:
                        log.append(f"‚ùå {rel_path}: –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ({e})")
                        errors += 1
                    progress_bar.progress(i / len(all_images), text=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {i}/{len(all_images)}")
                if converted_files:
                    result_zip = os.path.join(temp_dir, "result_convert.zip")
                    with zipfile.ZipFile(result_zip, "w") as zipf:
                        for src, rel in converted_files:
                            zipf.write(src, arcname=rel)
                    with open(result_zip, "rb") as f:
                        st.session_state["result_zip"] = f.read()
                    st.session_state["stats"] = {
                        "total": len(all_images),
                        "converted": len(converted_files),
                        "errors": errors
                    }
                    st.session_state["log"] = log
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    st.session_state["log"] = log
            st.session_state["step"] = 4
    st.button("–ù–∞–∑–∞–¥", on_click=lambda: st.session_state.update({"step": 2}))
    st.button("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", on_click=reset_all)

# --- –®–∞–≥ 4: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
elif st.session_state["step"] == 4:
    st.header("–®–∞–≥ 4: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    stats = st.session_state["stats"]
    mode = st.session_state["mode"]
    if mode == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ":
        st.success(f"–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {stats.get('renamed', 0)} –∏–∑ {stats.get('total', 0)} –ø–∞–ø–æ–∫. –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.get('skipped', 0)}")
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ",
            data=st.session_state["result_zip"],
            file_name="renamed_photos.zip",
            mime="application/zip"
        )
    else:
        st.success(f"–ì–æ—Ç–æ–≤–æ! –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('converted', 0)} –∏–∑ {stats.get('total', 0)} —Ñ–∞–π–ª–æ–≤. –û—à–∏–±–æ–∫: {stats.get('errors', 0)}")
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å JPG",
            data=st.session_state["result_zip"],
            file_name="converted_images.zip",
            mime="application/zip"
        )
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
        st.text_area("–õ–æ–≥:", value="\n".join(st.session_state["log"]), height=300, disabled=True)
    st.button("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", on_click=reset_all) 
